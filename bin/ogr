#!/usr/bin/env python

import argparse
import sys
from pyogr.ogr2ogr import ogr2ogr
from pyogr.ogrinfo import ogrinfo, ogr_formats, ogr_version_info
from pyogr.ogrvrt import ogr2vrt
from ogrtransform.spec import Spec
#from interlis.ilismeta import prettify


def info(args):
    if not args.layers:
        return ogrinfo(bReadOnly=True, bSummaryOnly=True, bAllLayers=True,
                       pszDataSource=args.source)
    else:
        return ogrinfo(bReadOnly=True, bSummaryOnly=True,
                       pszDataSource=args.source, papszLayers=args.layers)


def formats(args):
    return ogr_formats()


def version(args):
    return ogr_version_info()


def sql(args):
    return ogrinfo(pszDataSource=args.source, pszSQLStatement=args.sql)


def vrt(args):
    return ogr2vrt(infile=args.source, layer_list=args.layers)


def genspec(args):
    trans = Spec(ds=args.source, model=args.model)
    return trans.generate_spec(layer_list=args.layers)


def transform(args):
    trans = Spec(ds=args.source, spec=args.spec)
    ds = trans.vrt_datasource()
    ogr2ogr(pszFormat=args.format, pszDataSource=ds, pszDestDataSource=args.dest,
            bOverwrite=True)  # ,papszDSCO=["SPATIALITE=YES"],poOutputSRS=srs, poSourceSRS=srs
    trans.free_vrt_datasource()


def main():
    """Returns 0 on success, 1 on error, for sys.exit."""

    parser = argparse.ArgumentParser(
        description="Query and transform OGR compatible vector data")

    #Commands
    subparsers = parser.add_subparsers(title='commands',
                                       description='valid commands')
    #Common parameters
    inparam = {
        'help': "input datasource"
    }
    outparam = {
        'nargs': '?',
        'help': "output datasource",
        'default': sys.stdout
    }

    subparser = subparsers.add_parser('version', help='Show version information')
    subparser.set_defaults(func=version)

    subparser = subparsers.add_parser('formats', help='List available data formats')
    subparser.set_defaults(func=formats)

    subparser = subparsers.add_parser('info', help='Information about data')
    subparser.add_argument('source', **inparam)
    subparser.add_argument('layers', nargs='*', help='layer names')
    subparser.set_defaults(func=info)

    subparser = subparsers.add_parser('sql', help='Execute SQL Query')
    subparser.add_argument('source', **inparam)
    subparser.add_argument('sql', metavar='sql-query', help='SQL query')
    subparser.set_defaults(func=sql)

    subparser = subparsers.add_parser('vrt', help='Create VRT from data source')
    subparser.add_argument('source', **inparam)
    subparser.add_argument('layers', nargs='*', help='layer names')
    subparser.set_defaults(func=vrt)

    subparser = subparsers.add_parser('genspec', help='Generate transormation specification from data source')
    subparser.add_argument('source', **inparam)
    subparser.add_argument('layers', nargs='*', help='layer names')
    subparser.add_argument('--format', default='PostgreSQL', help='Destination format')
    subparser.add_argument('--model', default=None, help='Data model specification')
    subparser.set_defaults(func=genspec)

    subparser = subparsers.add_parser('transform', help='Transform data source based on transformation specification')
    subparser.add_argument('dest', **outparam)
    subparser.add_argument('source', **inparam)
    subparser.add_argument('layers', nargs='*', help='layer names')
    subparser.add_argument('--format', default='PostgreSQL', help='Destination format')
    subparser.add_argument('--spec', help='Transformation specification')
    subparser.set_defaults(func=transform)

    args = parser.parse_args()
    return args.func(args)


if __name__ == '__main__':
    sys.exit(main())
